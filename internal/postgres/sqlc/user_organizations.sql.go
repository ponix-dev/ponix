// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_organizations.sql

package sqlc

import (
	"context"
)

const addUserToOrganization = `-- name: AddUserToOrganization :exec
INSERT INTO user_organizations (user_id, organization_id, role)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, organization_id)
DO UPDATE SET 
    role = EXCLUDED.role,
    created_at = COALESCE(user_organizations.created_at, NOW())
`

type AddUserToOrganizationParams struct {
	UserID         string
	OrganizationID string
	Role           string
}

func (q *Queries) AddUserToOrganization(ctx context.Context, arg AddUserToOrganizationParams) error {
	_, err := q.db.Exec(ctx, addUserToOrganization, arg.UserID, arg.OrganizationID, arg.Role)
	return err
}

const getOrganizationUsers = `-- name: GetOrganizationUsers :many
SELECT user_id, role
FROM user_organizations
WHERE organization_id = $1
`

type GetOrganizationUsersRow struct {
	UserID string
	Role   string
}

func (q *Queries) GetOrganizationUsers(ctx context.Context, organizationID string) ([]GetOrganizationUsersRow, error) {
	rows, err := q.db.Query(ctx, getOrganizationUsers, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrganizationUsersRow
	for rows.Next() {
		var i GetOrganizationUsersRow
		if err := rows.Scan(&i.UserID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserOrganizations = `-- name: GetUserOrganizations :many
SELECT organization_id, role
FROM user_organizations
WHERE user_id = $1
`

type GetUserOrganizationsRow struct {
	OrganizationID string
	Role           string
}

func (q *Queries) GetUserOrganizations(ctx context.Context, userID string) ([]GetUserOrganizationsRow, error) {
	rows, err := q.db.Query(ctx, getUserOrganizations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserOrganizationsRow
	for rows.Next() {
		var i GetUserOrganizationsRow
		if err := rows.Scan(&i.OrganizationID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserInOrganization = `-- name: IsUserInOrganization :one
SELECT EXISTS(
    SELECT 1 FROM user_organizations 
    WHERE user_id = $1 AND organization_id = $2
) AS is_member
`

type IsUserInOrganizationParams struct {
	UserID         string
	OrganizationID string
}

func (q *Queries) IsUserInOrganization(ctx context.Context, arg IsUserInOrganizationParams) (bool, error) {
	row := q.db.QueryRow(ctx, isUserInOrganization, arg.UserID, arg.OrganizationID)
	var is_member bool
	err := row.Scan(&is_member)
	return is_member, err
}

const removeUserFromOrganization = `-- name: RemoveUserFromOrganization :exec
DELETE FROM user_organizations 
WHERE user_id = $1 AND organization_id = $2
`

type RemoveUserFromOrganizationParams struct {
	UserID         string
	OrganizationID string
}

func (q *Queries) RemoveUserFromOrganization(ctx context.Context, arg RemoveUserFromOrganizationParams) error {
	_, err := q.db.Exec(ctx, removeUserFromOrganization, arg.UserID, arg.OrganizationID)
	return err
}

const updateUserRole = `-- name: UpdateUserRole :exec
INSERT INTO user_organizations (user_id, organization_id, role)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, organization_id)
DO UPDATE SET 
    role = EXCLUDED.role
`

type UpdateUserRoleParams struct {
	UserID         string
	OrganizationID string
	Role           string
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.Exec(ctx, updateUserRole, arg.UserID, arg.OrganizationID, arg.Role)
	return err
}
