// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: lorawan.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLoRaWANConfig = `-- name: CreateLoRaWANConfig :one

INSERT INTO lorawan_configs (
    id, end_device_id, device_eui, application_eui, application_id, 
    application_key, network_key, activation_method, 
    frequency_plan_id, hardware_type_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, end_device_id, device_eui, application_eui, application_id, application_key, network_key, activation_method, frequency_plan_id, hardware_type_id, created_at, updated_at
`

type CreateLoRaWANConfigParams struct {
	ID               string
	EndDeviceID      string
	DeviceEui        string
	ApplicationEui   string
	ApplicationID    string
	ApplicationKey   string
	NetworkKey       pgtype.Text
	ActivationMethod int32
	FrequencyPlanID  string
	HardwareTypeID   string
}

// ===== LoRaWAN Configurations =====
func (q *Queries) CreateLoRaWANConfig(ctx context.Context, arg CreateLoRaWANConfigParams) (LorawanConfig, error) {
	row := q.db.QueryRow(ctx, createLoRaWANConfig,
		arg.ID,
		arg.EndDeviceID,
		arg.DeviceEui,
		arg.ApplicationEui,
		arg.ApplicationID,
		arg.ApplicationKey,
		arg.NetworkKey,
		arg.ActivationMethod,
		arg.FrequencyPlanID,
		arg.HardwareTypeID,
	)
	var i LorawanConfig
	err := row.Scan(
		&i.ID,
		&i.EndDeviceID,
		&i.DeviceEui,
		&i.ApplicationEui,
		&i.ApplicationID,
		&i.ApplicationKey,
		&i.NetworkKey,
		&i.ActivationMethod,
		&i.FrequencyPlanID,
		&i.HardwareTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createLoRaWANHardwareType = `-- name: CreateLoRaWANHardwareType :one


INSERT INTO lorawan_hardware_types (id, name, description, manufacturer, model, firmware_version, hardware_version, profile, lorawan_version)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, name, description, manufacturer, model, firmware_version, hardware_version, profile, lorawan_version, created_at, updated_at, deleted_at
`

type CreateLoRaWANHardwareTypeParams struct {
	ID              string
	Name            string
	Description     pgtype.Text
	Manufacturer    string
	Model           string
	FirmwareVersion pgtype.Text
	HardwareVersion pgtype.Text
	Profile         pgtype.Text
	LorawanVersion  int32
}

// LoRaWAN CRUD queries for the new three-table structure
// Based on TTI LoRaWAN Stack v3 and ponix protobuf definitions
// ===== LoRaWAN Hardware Types =====
func (q *Queries) CreateLoRaWANHardwareType(ctx context.Context, arg CreateLoRaWANHardwareTypeParams) (LorawanHardwareType, error) {
	row := q.db.QueryRow(ctx, createLoRaWANHardwareType,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Manufacturer,
		arg.Model,
		arg.FirmwareVersion,
		arg.HardwareVersion,
		arg.Profile,
		arg.LorawanVersion,
	)
	var i LorawanHardwareType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Manufacturer,
		&i.Model,
		&i.FirmwareVersion,
		&i.HardwareVersion,
		&i.Profile,
		&i.LorawanVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteLoRaWANConfig = `-- name: DeleteLoRaWANConfig :exec
DELETE FROM lorawan_configs
WHERE id = $1
`

func (q *Queries) DeleteLoRaWANConfig(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteLoRaWANConfig, id)
	return err
}

const deleteLoRaWANHardwareType = `-- name: DeleteLoRaWANHardwareType :exec
UPDATE lorawan_hardware_types
SET deleted_at = NOW(), updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteLoRaWANHardwareType(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteLoRaWANHardwareType, id)
	return err
}

const getCompleteLoRaWANDevice = `-- name: GetCompleteLoRaWANDevice :one

SELECT 
    ed.id as end_device_id,
    ed.name,
    ed.description,
    ed.organization_id,
    ed.status,
    ed.data_type,
    ed.hardware_type,
    ed.created_at as device_created_at,
    ed.updated_at as device_updated_at,
    lc.id as lorawan_config_id,
    lc.device_eui,
    lc.application_eui,
    lc.application_id,
    lc.application_key,
    lc.network_key,
    lc.activation_method,
    lc.frequency_plan_id,
    lc.hardware_type_id,
    lht.name as hardware_name,
    lht.manufacturer,
    lht.model,
    lht.firmware_version,
    lht.hardware_version,
    lht.lorawan_version,
    lht.profile
FROM end_devices ed
JOIN lorawan_configs lc ON ed.id = lc.end_device_id
JOIN lorawan_hardware_types lht ON lc.hardware_type_id = lht.id
WHERE ed.id = $1 AND lht.deleted_at IS NULL
`

type GetCompleteLoRaWANDeviceRow struct {
	EndDeviceID      string
	Name             string
	Description      pgtype.Text
	OrganizationID   string
	Status           int32
	DataType         int32
	HardwareType     int32
	DeviceCreatedAt  pgtype.Timestamptz
	DeviceUpdatedAt  pgtype.Timestamptz
	LorawanConfigID  string
	DeviceEui        string
	ApplicationEui   string
	ApplicationID    string
	ApplicationKey   string
	NetworkKey       pgtype.Text
	ActivationMethod int32
	FrequencyPlanID  string
	HardwareTypeID   string
	HardwareName     string
	Manufacturer     string
	Model            string
	FirmwareVersion  pgtype.Text
	HardwareVersion  pgtype.Text
	LorawanVersion   int32
	Profile          pgtype.Text
}

// ===== Combined Queries (Joining End Device with LoRaWAN Config) =====
func (q *Queries) GetCompleteLoRaWANDevice(ctx context.Context, id string) (GetCompleteLoRaWANDeviceRow, error) {
	row := q.db.QueryRow(ctx, getCompleteLoRaWANDevice, id)
	var i GetCompleteLoRaWANDeviceRow
	err := row.Scan(
		&i.EndDeviceID,
		&i.Name,
		&i.Description,
		&i.OrganizationID,
		&i.Status,
		&i.DataType,
		&i.HardwareType,
		&i.DeviceCreatedAt,
		&i.DeviceUpdatedAt,
		&i.LorawanConfigID,
		&i.DeviceEui,
		&i.ApplicationEui,
		&i.ApplicationID,
		&i.ApplicationKey,
		&i.NetworkKey,
		&i.ActivationMethod,
		&i.FrequencyPlanID,
		&i.HardwareTypeID,
		&i.HardwareName,
		&i.Manufacturer,
		&i.Model,
		&i.FirmwareVersion,
		&i.HardwareVersion,
		&i.LorawanVersion,
		&i.Profile,
	)
	return i, err
}

const getLoRaWANConfig = `-- name: GetLoRaWANConfig :one
SELECT id, end_device_id, device_eui, application_eui, application_id, application_key, network_key, activation_method, frequency_plan_id, hardware_type_id, created_at, updated_at FROM lorawan_configs
WHERE id = $1
`

func (q *Queries) GetLoRaWANConfig(ctx context.Context, id string) (LorawanConfig, error) {
	row := q.db.QueryRow(ctx, getLoRaWANConfig, id)
	var i LorawanConfig
	err := row.Scan(
		&i.ID,
		&i.EndDeviceID,
		&i.DeviceEui,
		&i.ApplicationEui,
		&i.ApplicationID,
		&i.ApplicationKey,
		&i.NetworkKey,
		&i.ActivationMethod,
		&i.FrequencyPlanID,
		&i.HardwareTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLoRaWANConfigByDeviceEUI = `-- name: GetLoRaWANConfigByDeviceEUI :one
SELECT id, end_device_id, device_eui, application_eui, application_id, application_key, network_key, activation_method, frequency_plan_id, hardware_type_id, created_at, updated_at FROM lorawan_configs
WHERE device_eui = $1
`

func (q *Queries) GetLoRaWANConfigByDeviceEUI(ctx context.Context, deviceEui string) (LorawanConfig, error) {
	row := q.db.QueryRow(ctx, getLoRaWANConfigByDeviceEUI, deviceEui)
	var i LorawanConfig
	err := row.Scan(
		&i.ID,
		&i.EndDeviceID,
		&i.DeviceEui,
		&i.ApplicationEui,
		&i.ApplicationID,
		&i.ApplicationKey,
		&i.NetworkKey,
		&i.ActivationMethod,
		&i.FrequencyPlanID,
		&i.HardwareTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLoRaWANConfigByEndDevice = `-- name: GetLoRaWANConfigByEndDevice :one
SELECT id, end_device_id, device_eui, application_eui, application_id, application_key, network_key, activation_method, frequency_plan_id, hardware_type_id, created_at, updated_at FROM lorawan_configs
WHERE end_device_id = $1
`

func (q *Queries) GetLoRaWANConfigByEndDevice(ctx context.Context, endDeviceID string) (LorawanConfig, error) {
	row := q.db.QueryRow(ctx, getLoRaWANConfigByEndDevice, endDeviceID)
	var i LorawanConfig
	err := row.Scan(
		&i.ID,
		&i.EndDeviceID,
		&i.DeviceEui,
		&i.ApplicationEui,
		&i.ApplicationID,
		&i.ApplicationKey,
		&i.NetworkKey,
		&i.ActivationMethod,
		&i.FrequencyPlanID,
		&i.HardwareTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLoRaWANHardwareType = `-- name: GetLoRaWANHardwareType :one
SELECT id, name, description, manufacturer, model, firmware_version, hardware_version, profile, lorawan_version, created_at, updated_at, deleted_at FROM lorawan_hardware_types
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetLoRaWANHardwareType(ctx context.Context, id string) (LorawanHardwareType, error) {
	row := q.db.QueryRow(ctx, getLoRaWANHardwareType, id)
	var i LorawanHardwareType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Manufacturer,
		&i.Model,
		&i.FirmwareVersion,
		&i.HardwareVersion,
		&i.Profile,
		&i.LorawanVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listCompleteLoRaWANDevicesByOrganization = `-- name: ListCompleteLoRaWANDevicesByOrganization :many
SELECT 
    ed.id as end_device_id,
    ed.name,
    ed.description,
    ed.organization_id,
    ed.status,
    ed.data_type,
    ed.hardware_type,
    lc.device_eui,
    lc.application_id,
    lht.manufacturer,
    lht.model
FROM end_devices ed
JOIN lorawan_configs lc ON ed.id = lc.end_device_id
JOIN lorawan_hardware_types lht ON lc.hardware_type_id = lht.id
WHERE ed.organization_id = $1 AND lht.deleted_at IS NULL
ORDER BY ed.name
`

type ListCompleteLoRaWANDevicesByOrganizationRow struct {
	EndDeviceID    string
	Name           string
	Description    pgtype.Text
	OrganizationID string
	Status         int32
	DataType       int32
	HardwareType   int32
	DeviceEui      string
	ApplicationID  string
	Manufacturer   string
	Model          string
}

func (q *Queries) ListCompleteLoRaWANDevicesByOrganization(ctx context.Context, organizationID string) ([]ListCompleteLoRaWANDevicesByOrganizationRow, error) {
	rows, err := q.db.Query(ctx, listCompleteLoRaWANDevicesByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCompleteLoRaWANDevicesByOrganizationRow
	for rows.Next() {
		var i ListCompleteLoRaWANDevicesByOrganizationRow
		if err := rows.Scan(
			&i.EndDeviceID,
			&i.Name,
			&i.Description,
			&i.OrganizationID,
			&i.Status,
			&i.DataType,
			&i.HardwareType,
			&i.DeviceEui,
			&i.ApplicationID,
			&i.Manufacturer,
			&i.Model,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLoRaWANConfigsByApplication = `-- name: ListLoRaWANConfigsByApplication :many
SELECT id, end_device_id, device_eui, application_eui, application_id, application_key, network_key, activation_method, frequency_plan_id, hardware_type_id, created_at, updated_at FROM lorawan_configs
WHERE application_id = $1
ORDER BY device_eui
`

func (q *Queries) ListLoRaWANConfigsByApplication(ctx context.Context, applicationID string) ([]LorawanConfig, error) {
	rows, err := q.db.Query(ctx, listLoRaWANConfigsByApplication, applicationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LorawanConfig
	for rows.Next() {
		var i LorawanConfig
		if err := rows.Scan(
			&i.ID,
			&i.EndDeviceID,
			&i.DeviceEui,
			&i.ApplicationEui,
			&i.ApplicationID,
			&i.ApplicationKey,
			&i.NetworkKey,
			&i.ActivationMethod,
			&i.FrequencyPlanID,
			&i.HardwareTypeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLoRaWANHardwareTypes = `-- name: ListLoRaWANHardwareTypes :many
SELECT id, name, description, manufacturer, model, firmware_version, hardware_version, profile, lorawan_version, created_at, updated_at, deleted_at FROM lorawan_hardware_types
WHERE deleted_at IS NULL
ORDER BY manufacturer, model
`

func (q *Queries) ListLoRaWANHardwareTypes(ctx context.Context) ([]LorawanHardwareType, error) {
	rows, err := q.db.Query(ctx, listLoRaWANHardwareTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LorawanHardwareType
	for rows.Next() {
		var i LorawanHardwareType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Manufacturer,
			&i.Model,
			&i.FirmwareVersion,
			&i.HardwareVersion,
			&i.Profile,
			&i.LorawanVersion,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLoRaWANConfig = `-- name: UpdateLoRaWANConfig :one
UPDATE lorawan_configs
SET device_eui = $2, application_eui = $3, application_id = $4,
    application_key = $5, network_key = $6,
    activation_method = $7, frequency_plan_id = $8, hardware_type_id = $9,
    updated_at = NOW()
WHERE id = $1
RETURNING id, end_device_id, device_eui, application_eui, application_id, application_key, network_key, activation_method, frequency_plan_id, hardware_type_id, created_at, updated_at
`

type UpdateLoRaWANConfigParams struct {
	ID               string
	DeviceEui        string
	ApplicationEui   string
	ApplicationID    string
	ApplicationKey   string
	NetworkKey       pgtype.Text
	ActivationMethod int32
	FrequencyPlanID  string
	HardwareTypeID   string
}

func (q *Queries) UpdateLoRaWANConfig(ctx context.Context, arg UpdateLoRaWANConfigParams) (LorawanConfig, error) {
	row := q.db.QueryRow(ctx, updateLoRaWANConfig,
		arg.ID,
		arg.DeviceEui,
		arg.ApplicationEui,
		arg.ApplicationID,
		arg.ApplicationKey,
		arg.NetworkKey,
		arg.ActivationMethod,
		arg.FrequencyPlanID,
		arg.HardwareTypeID,
	)
	var i LorawanConfig
	err := row.Scan(
		&i.ID,
		&i.EndDeviceID,
		&i.DeviceEui,
		&i.ApplicationEui,
		&i.ApplicationID,
		&i.ApplicationKey,
		&i.NetworkKey,
		&i.ActivationMethod,
		&i.FrequencyPlanID,
		&i.HardwareTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLoRaWANHardwareType = `-- name: UpdateLoRaWANHardwareType :one
UPDATE lorawan_hardware_types
SET name = $2, description = $3, manufacturer = $4, model = $5, 
    firmware_version = $6, hardware_version = $7, profile = $8, lorawan_version = $9, updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, manufacturer, model, firmware_version, hardware_version, profile, lorawan_version, created_at, updated_at, deleted_at
`

type UpdateLoRaWANHardwareTypeParams struct {
	ID              string
	Name            string
	Description     pgtype.Text
	Manufacturer    string
	Model           string
	FirmwareVersion pgtype.Text
	HardwareVersion pgtype.Text
	Profile         pgtype.Text
	LorawanVersion  int32
}

func (q *Queries) UpdateLoRaWANHardwareType(ctx context.Context, arg UpdateLoRaWANHardwareTypeParams) (LorawanHardwareType, error) {
	row := q.db.QueryRow(ctx, updateLoRaWANHardwareType,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Manufacturer,
		arg.Model,
		arg.FirmwareVersion,
		arg.HardwareVersion,
		arg.Profile,
		arg.LorawanVersion,
	)
	var i LorawanHardwareType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Manufacturer,
		&i.Model,
		&i.FirmwareVersion,
		&i.HardwareVersion,
		&i.Profile,
		&i.LorawanVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
