// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: system.sql

package sqlc

import (
	"context"
)

const createSystem = `-- name: CreateSystem :one
INSERT INTO
    systems (id, organization_id, name, status)
VALUES
    ($1, $2, $3, $4)
RETURNING
    id, organization_id, name, status
`

type CreateSystemParams struct {
	ID             string
	OrganizationID string
	Name           string
	Status         int32
}

func (q *Queries) CreateSystem(ctx context.Context, arg CreateSystemParams) (System, error) {
	row := q.db.QueryRow(ctx, createSystem,
		arg.ID,
		arg.OrganizationID,
		arg.Name,
		arg.Status,
	)
	var i System
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Status,
	)
	return i, err
}

const getSystemEndDevices = `-- name: GetSystemEndDevices :many
SELECT
    id, system_id, network_server_id, system_input_id, name, status
FROM
    end_devices
WHERE
    system_id = $1
`

func (q *Queries) GetSystemEndDevices(ctx context.Context, systemID string) ([]EndDevice, error) {
	rows, err := q.db.Query(ctx, getSystemEndDevices, systemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EndDevice
	for rows.Next() {
		var i EndDevice
		if err := rows.Scan(
			&i.ID,
			&i.SystemID,
			&i.NetworkServerID,
			&i.SystemInputID,
			&i.Name,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemGateways = `-- name: GetSystemGateways :many
SELECT
    id, system_id, network_server_id, name, status
FROM
    gateways
WHERE
    system_id = $1
`

func (q *Queries) GetSystemGateways(ctx context.Context, systemID string) ([]Gateway, error) {
	rows, err := q.db.Query(ctx, getSystemGateways, systemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gateway
	for rows.Next() {
		var i Gateway
		if err := rows.Scan(
			&i.ID,
			&i.SystemID,
			&i.NetworkServerID,
			&i.Name,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemInputs = `-- name: GetSystemInputs :many
SELECT
    system_inputs.name,
    system_inputs.id,
    system_inputs.system_id,
    system_inputs.status,
    fields.id,
    tanks.id,
    grow_mediums.id, grow_mediums.medium_type
FROM
    system_inputs
    JOIN grow_mediums ON system_inputs.grow_medium_id = grow_mediums.id
    JOIN tanks ON system_inputs.tank_id = tanks.id
    JOIN fields ON system_inputs.field_id = fields.id
WHERE
    system_id = $1
`

type GetSystemInputsRow struct {
	Name       string
	ID         string
	SystemID   string
	Status     int32
	Field      Field
	Tank       Tank
	GrowMedium GrowMedium
}

func (q *Queries) GetSystemInputs(ctx context.Context, systemID string) ([]GetSystemInputsRow, error) {
	rows, err := q.db.Query(ctx, getSystemInputs, systemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSystemInputsRow
	for rows.Next() {
		var i GetSystemInputsRow
		if err := rows.Scan(
			&i.Name,
			&i.ID,
			&i.SystemID,
			&i.Status,
			&i.Field.ID,
			&i.Tank.ID,
			&i.GrowMedium.ID,
			&i.GrowMedium.MediumType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemNetworkServers = `-- name: GetSystemNetworkServers :many
SELECT
    id, system_id, name, status, iot_platform
FROM
    network_servers
WHERE
    system_id = $1
`

func (q *Queries) GetSystemNetworkServers(ctx context.Context, systemID string) ([]NetworkServer, error) {
	rows, err := q.db.Query(ctx, getSystemNetworkServers, systemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NetworkServer
	for rows.Next() {
		var i NetworkServer
		if err := rows.Scan(
			&i.ID,
			&i.SystemID,
			&i.Name,
			&i.Status,
			&i.IotPlatform,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
