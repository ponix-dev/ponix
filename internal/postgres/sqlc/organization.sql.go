// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organization.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO
    organizations (id, name, status, created_at, updated_at)
VALUES
    ($1, $2, $3, $4, $5)
ON CONFLICT (id) DO UPDATE SET
    name = EXCLUDED.name,
    status = EXCLUDED.status,
    updated_at = EXCLUDED.updated_at
RETURNING
    id, name, status, created_at, updated_at
`

type CreateOrganizationParams struct {
	ID        string
	Name      string
	Status    int32
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrganization = `-- name: GetOrganization :one
SELECT
    id, name, status, created_at, updated_at
FROM
    organizations
WHERE
    id = $1
`

func (q *Queries) GetOrganization(ctx context.Context, id string) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserOrganizationsWithDetails = `-- name: GetUserOrganizationsWithDetails :many
SELECT
    o.id,
    o.name,
    o.status,
    o.created_at,
    o.updated_at
FROM
    organizations o
    INNER JOIN user_organizations uo ON o.id = uo.organization_id
WHERE
    uo.user_id = $1
`

func (q *Queries) GetUserOrganizationsWithDetails(ctx context.Context, userID string) ([]Organization, error) {
	rows, err := q.db.Query(ctx, getUserOrganizationsWithDetails, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
