// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: end_device.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEndDevice = `-- name: CreateEndDevice :one

INSERT INTO end_devices (id, name, description, organization_id, status, data_type, hardware_type)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, description, organization_id, status, data_type, hardware_type, created_at, updated_at
`

type CreateEndDeviceParams struct {
	ID             string
	Name           string
	Description    pgtype.Text
	OrganizationID string
	Status         int32
	DataType       int32
	HardwareType   int32
}

// ===== End Devices (Generic) =====
func (q *Queries) CreateEndDevice(ctx context.Context, arg CreateEndDeviceParams) (EndDevice, error) {
	row := q.db.QueryRow(ctx, createEndDevice,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.OrganizationID,
		arg.Status,
		arg.DataType,
		arg.HardwareType,
	)
	var i EndDevice
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OrganizationID,
		&i.Status,
		&i.DataType,
		&i.HardwareType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEndDevice = `-- name: DeleteEndDevice :exec
DELETE FROM end_devices
WHERE id = $1
`

func (q *Queries) DeleteEndDevice(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteEndDevice, id)
	return err
}

const getEndDevice = `-- name: GetEndDevice :one
SELECT id, name, description, organization_id, status, data_type, hardware_type, created_at, updated_at FROM end_devices
WHERE id = $1
`

func (q *Queries) GetEndDevice(ctx context.Context, id string) (EndDevice, error) {
	row := q.db.QueryRow(ctx, getEndDevice, id)
	var i EndDevice
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OrganizationID,
		&i.Status,
		&i.DataType,
		&i.HardwareType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEndDevicesByOrganization = `-- name: ListEndDevicesByOrganization :many
SELECT id, name, description, organization_id, status, data_type, hardware_type, created_at, updated_at FROM end_devices
WHERE organization_id = $1
ORDER BY name
`

func (q *Queries) ListEndDevicesByOrganization(ctx context.Context, organizationID string) ([]EndDevice, error) {
	rows, err := q.db.Query(ctx, listEndDevicesByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EndDevice
	for rows.Next() {
		var i EndDevice
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OrganizationID,
			&i.Status,
			&i.DataType,
			&i.HardwareType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEndDevice = `-- name: UpdateEndDevice :one
UPDATE end_devices
SET name = $2, description = $3, status = $4, data_type = $5, hardware_type = $6, updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, organization_id, status, data_type, hardware_type, created_at, updated_at
`

type UpdateEndDeviceParams struct {
	ID           string
	Name         string
	Description  pgtype.Text
	Status       int32
	DataType     int32
	HardwareType int32
}

func (q *Queries) UpdateEndDevice(ctx context.Context, arg UpdateEndDeviceParams) (EndDevice, error) {
	row := q.db.QueryRow(ctx, updateEndDevice,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.DataType,
		arg.HardwareType,
	)
	var i EndDevice
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OrganizationID,
		&i.Status,
		&i.DataType,
		&i.HardwareType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
